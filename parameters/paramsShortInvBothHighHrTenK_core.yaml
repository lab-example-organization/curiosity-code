curstarts:
  - scmin: [ 8, 8, 8, 8]
    scmax: [11,11,11,11]
  - scmin: [ 8,25, 8, 8]
    scmax: [11,28,11,11]
  - scmin: [25, 8, 8, 8]
    scmax: [28,11,11,11]
  - scmin: [25,25, 8, 8]
    scmax: [28,28,11,11]
  - scmin: [ 8, 8,25,25]
    scmax: [11,11,28,28]
  - scmin: [ 8,25,25,25]
    scmax: [11,28,28,28]
  - scmin: [25, 8,25,25]
    scmax: [28,11,28,28]
  - scmin: [25,25,25,25]
    scmax: [28,28,28,28]
  - scmin: [ 8, 8, 8, 8]
    scmax: [11,11,11,11]
  - scmin: [ 8,25, 8, 8]
    scmax: [11,28,11,11]
  - scmin: [25, 8, 8, 8]
    scmax: [28,11,11,11]
  - scmin: [25,25, 8, 8]
    scmax: [28,28,11,11]
  - scmin: [ 8, 8,25,25]
    scmax: [11,11,28,28]
  - scmin: [ 8,25,25,25]
    scmax: [11,28,28,28]
  - scmin: [25, 8,25,25]
    scmax: [28,11,28,28]
  - scmin: [25,25,25,25]
    scmax: [28,28,28,28]
  - scmin: [ 8, 8, 8, 8]
    scmax: [11,11,11,11]
  - scmin: [ 8,25, 8, 8]
    scmax: [11,28,11,11]
  - scmin: [25, 8, 8, 8]
    scmax: [28,11,11,11]
  - scmin: [25,25, 8, 8]
    scmax: [28,28,11,11]
  - scmin: [ 8, 8,25,25]
    scmax: [11,11,28,28]
  - scmin: [ 8,25,25,25]
    scmax: [11,28,28,28]
  - scmin: [25, 8,25,25]
    scmax: [28,11,28,28]
  - scmin: [25,25,25,25]
    scmax: [28,28,28,28]
  - scmin: [ 8, 8, 8, 8]
    scmax: [11,11,11,11]
  - scmin: [ 8,25, 8, 8]
    scmax: [11,28,11,11]
  - scmin: [25, 8, 8, 8]
    scmax: [28,11,11,11]
  - scmin: [25,25, 8, 8]
    scmax: [28,28,11,11]
  - scmin: [ 8, 8,25,25]
    scmax: [11,11,28,28]
  - scmin: [ 8,25,25,25]
    scmax: [11,28,28,28]
  - scmin: [25, 8,25,25]
    scmax: [28,11,28,28]
  - scmin: [25,25,25,25]
    scmax: [28,28,28,28]

simnumberstart: [12707, 12710, 12722, 12725, 12732, 12735, 12747, 12750,
                 12757, 12760, 12772, 12775, 12782, 12785, 12797, 12800,
                 12807, 12810, 12822, 12825, 12832, 12835, 12847, 12850,
                 12857, 12860, 12872, 12875, 12882, 12885, 12897, 12900] #
runlength: 10000
syllearnstyle: 'nsL'
vertoblearn:
  vertical:
    learn: 0.95
    invent: 0.1
  oblique:
    learn: 0.1
    invent: 0.01
syldist: 'oppsyl'
curinh_value: 0.95
num_pop: 2
pop_size: 400
sylnum: 156
num_sylls_per_prob_lvl: 8
number_of_reps: 50
standard_deviation: 2
mate_selection_type: "curiosity"
tutor_selection_type: "curiosity"
selection_round_up: TRUE

# curinh_pattern - calling either the row number
# or name of row for different curiosity inheritance patterns -
# 1: father; 2: mother; 3: same; 4: opposite; 5: curinhdistribution
curinh_pattern: [1, 1, 1, 1, 1, 1, 1, 1,
                 2, 2, 2, 2, 2, 2, 2, 2,
                 3, 3, 3, 3, 3, 3, 3, 3,
                 5, 5, 5, 5, 5, 5, 5, 5]
one_pop_singers: [10, 10]
recordsimplifyfactor: 100
curinhdistribution: [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 
                     0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 
                     0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 
                     0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
# must be between 0 and 1; [value displayed] == male; [1 - value] == female
# distribution of curinh between parents. Only need more than one value here IF 1)Indrunredo == T AND 2) curinh_pattern == 5


traitinvasion: TRUE
invasionthoutmstps: 1
invasionpopsize: 100 # max 200... it pulls from "pop_calls_matrix"
# invasionstyle: 'offspring' # need: offspring, wholesale,
invasionstyle: 'curiosity' # need: curiosity, sylrep, both!
invasionpop: 'focal' # either pop 1 (focal population), or pop 2 (background population)
invasionsex: 'both' # male or female (or, perhaps, both?)
invasiontraitvalue: [0.85, 0.1] # If false, it will "reverse" the subpopulation's current curiosity level (1 - [current curiosity]).
                          # If it's not FALSE, then it's a string of two values (target value, size of range)


                          # Indrunredo: TRUE # for redoing individual runs - need to make both simnumberstart and curinh_pattern into arrays for every re-run listed in curstarts.
# indrunredo: TRUE
indrunredo: FALSE
# redodir: 'file.path("/", "mnt", "c", "Users", "Parker", "Documents", "Lab_Notebook", "projects", "Code", "curiosity-code", "results", "tenKfiveByFive_childFemHihInv")' # 'file.path("/", "mnt", "f", "results", "tenKfiveByFive_parentNoInv")' ### this will replace the tenK_dir args within fpmr
redodir: FALSE

# This is for starting a run again, using pre-specified endrep and endcur from a past run. If they're not supposed to be used, they both need to be false!
lastruninit: TRUE
# lastruninit: FALSE # this was changed for figure redo; variable-store files already done

# If this is being used, use an unique pattern from the run whose last timestep you would like to use.
# lastrunid: '190820_3481'
lastrunid: ['11707', '11710', '11722', '11725', '11732', '11735', '11747', '11750',
            '11757', '11760', '11772', '11775', '11782', '11785', '11797', '11800',
            '11807', '11810', '11822', '11825', '11832', '11835', '11847', '11850',
            '11857', '11860', '11872', '11875', '11882', '11885', '11897', '11900']
# lastrunid: FALSE
inputdir: "tenKfiveByFive_shortParentNoInv"
# want to be able to put a string of different patterns, for a number of different runs. say, for example, there's more than one set of initial population conditions to consider, in the context of an invasion happening several thousand timesteps into it.
# BUT: that would mean separate uses of multi_runs, in a parallelized way... so, while there may be several different lastrunid's, that won't propagate down to restart_from_save! Awesome!

# screwedUp: FALSE

# figure settings

figure_redo_only: FALSE
compare_subsets: FALSE
recolorize: "range-median"
absolute_yAxis: TRUE
