curstarts:
  - scMin: [29,29,29,29]	
    scMax: [34,34,34,34]
  - scMin: [ 1,29,29,29]	
    scMax: [ 7,34,34,34]
  - scMin: [29, 1,29,29]	
    scMax: [34, 7,34,34]
simNumberStart: [3516]
runLength: '10k'
SylLearnStyle: 'nsL'
vertObLearn:
  vertical:
    learn: 0.95
    invent: 0.1
  oblique:
    learn: 0.1
    invent: 0.01
sylDist: 'oppsyl'
curinh_value: 0.95
num_pop: 2
pop_size: 400
sylnum: 156
num_sylls_per_prob_lvl: 8
number_of_reps: 50
standard_deviation: 2

# curinh_pattern - calling either the row number 
# or name of row for different curiosity inheritance patterns - 
# 1: father; 2: mother; 3: same; 4: opposite; 5: curinhDistribution
curinh_pattern: 3
one_pop_singers: [10, 10]
RecordSimplifyFactor: 100
curinhDistribution: 0.95
# must be between 0 and 1; [value displayed] == male; [1 - value] == female
# distribution of curinh between parents. Only need more than one value here IF 1)IndRunRedo == T AND 2) curinh_pattern == 5

traitInvasion: FALSE
# traitInvasion: TRUE
invasionThouTmstps: 2
invasionPopSize: 50 # max 200... it pulls from "pop_calls_matrix"
# invasionStyle: 'offspring' # need: offspring, wholesale, 
invasionFocus: 'curiosity' # need: curiosity, sylrep, both!
invasionPop: 'focal' # either pop 1 (focal population), or pop 2 (background population)
invasionSex: 'male' # male or female (or, perhaps, both?)
invasionTraitValue: [0.75, 0.3] # If false, it will "reverse" the subpopulation's current curiosity level (1 - [current curiosity]). 
                          # If it's not FALSE, then it's a string of two values (target value, size of range)


                          # IndRunRedo: TRUE # for redoing individual runs - need to make both simnumberstart and curinh_pattern into arrays for every re-run listed in curstarts.
IndRunRedo: FALSE

# This is for starting a run again, using pre-specified endrep and endcur from a past run. If they're not supposed to be used, they both need to be false!
lastRunInit: TRUE
# lastRunInit: FALSE

# If this is being used, use an unique pattern from the run whose last timestep you would like to use.
# lastRunID: '190820_3481'
lastRunID: ['3513', '3514', '3515']
# lastRunID: ['3482', '3486', '3487']
# lastRunID: FALSE
# want to be able to put a string of different patterns, for a number of different runs. say, for example, there's more than one set of initial population conditions to consider, in the context of an invasion happening several thousand timesteps into it. 
# BUT: that would mean separate uses of multi_runs, in a parallelized way... so, while there may be several different lastRunID's, that won't propagate down to restart_from_save! Awesome!
